// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mong "github.com/kornharem08/auction_example/lib/mong"
)

// IConnect is an autogenerated mock type for the IConnect type
type IConnect struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IConnect) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database provides a mock function with given fields:
func (_m *IConnect) Database() mong.IDatabase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 mong.IDatabase
	if rf, ok := ret.Get(0).(func() mong.IDatabase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mong.IDatabase)
		}
	}

	return r0
}

// NewSession provides a mock function with given fields:
func (_m *IConnect) NewSession() (mong.ISession, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 mong.ISession
	var r1 error
	if rf, ok := ret.Get(0).(func() (mong.ISession, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mong.ISession); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mong.ISession)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIConnect creates a new instance of IConnect. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConnect(t interface {
	mock.TestingT
	Cleanup(func())
}) *IConnect {
	mock := &IConnect{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
