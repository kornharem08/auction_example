package mocks

import (
	context "context"

	mong "github.com/kornharem08/auction_example/lib/mong"
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// ISession is an autogenerated mock type for the ISession type
type ISession struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ISession) Close() {
	_m.Called()
}

// DoTransaction provides a mock function with given fields: fn
func (_m *ISession) DoTransaction(fn mong.SessionFunc) (interface{}, error) {
	ctx := context.Background()
	sctx := mongo.NewSessionContext(ctx, mongo.SessionFromContext(ctx))
	return fn(sctx)

}

// NewISession creates a new instance of ISession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISession(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISession {
	mock := &ISession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
